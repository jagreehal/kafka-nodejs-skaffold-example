apiVersion: v1
kind: Service
metadata:
  name: kafka
  labels:
    name: kafka
spec:
  ports:
    - name: "9092"
      port: 9092
      targetPort: 9092
  selector:
    app: kafka
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  labels:
    name: kafka-claim
  name: kafka-claim
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 100Mi
status: {}

---
kind: Deployment
apiVersion: apps/v1
metadata:
  name: kafka
spec:
  replicas: 1
  selector:
    matchLabels:
      app: kafka
  template:
    metadata:
      labels:
        app: kafka
    spec:
      containers:
        - name: kafka
          image: wurstmeister/kafka
          env:
            - name: KAFKA_PORT
              value: "9092"
            - name: KAFKA_LISTENERS
              value: INTERNAL://0.0.0.0:9092,OUTSIDE://localhost:9092
            - name: KAFKA_ADVERTISED_LISTENERS
              value: INTERNAL://0.0.0.0:9092,OUTSIDE://localhost:9092
            - name: KAFKA_LISTENER_SECURITY_PROTOCOL_MAP
              value: INTERNAL:PLAINTEXT,OUTSIDE:PLAINTEXT
            - name: KAFKA_INTER_BROKER_LISTENER_NAME
              value: INTERNAL
            - name: KAFKA_CREATE_TOPICS
              value: EXAMPLE_EVENT_TOPIC
            # - name: KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR
            #   value: "1"
            - name: KAFKA_ZOOKEEPER_CONNECT
              value: zookeeper:2181
          ports:
            - containerPort: 9092
          resources: {}
          volumeMounts:
            - mountPath: /var/run/docker.sock
              name: kafka-claim
      restartPolicy: Always
      volumes:
        - name: kafka-claim
          persistentVolumeClaim:
            claimName: kafka-claim
